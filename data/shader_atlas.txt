//example of some shaders compiled
flat basic.vs flat.fs
texture basic.vs texture.fs
singlePass basic.vs singlePass.fs
multiPass basic.vs multiPass.fs
noLights basic.vs noLights.fs
flat basic.vs flat.fs
depth quad.vs depth.fs
multi basic.vs multi.fs

\basic.vs

#version 330 core

in vec3 a_vertex;
in vec3 a_normal;
in vec2 a_coord;
in vec4 a_color;

uniform vec3 u_camera_pos;

uniform mat4 u_model;
uniform mat4 u_viewprojection;

//this will store the color for the pixel shader
out vec3 v_position;
out vec3 v_world_position;
out vec3 v_normal;
out vec2 v_uv;
out vec4 v_color;

uniform float u_time;

void main()
{	
	//calcule the normal in camera space (the NormalMatrix is like ViewMatrix but without traslation)
	v_normal = (u_model * vec4( a_normal, 0.0) ).xyz;
	
	//calcule the vertex in object space
	v_position = a_vertex;
	v_world_position = (u_model * vec4( v_position, 1.0) ).xyz;
	
	//store the color in the varying var to use it from the pixel shader
	v_color = a_color;

	//store the texture coordinates
	v_uv = a_coord;

	//calcule the position of the vertex using the matrices
	gl_Position = u_viewprojection * vec4( v_world_position, 1.0 );
}

\quad.vs

#version 330 core

in vec3 a_vertex;
in vec2 a_coord;
out vec2 v_uv;

void main()
{	
	v_uv = a_coord;
	gl_Position = vec4( a_vertex, 1.0 );
}


\flat.fs

#version 330 core

uniform vec4 u_color;

out vec4 FragColor;

void main()
{
	FragColor = u_color;
}

\singlePass.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;
in vec4 v_color;

uniform vec4 u_color;
uniform sampler2D u_texture;
uniform float u_time;
uniform float u_alpha_cutoff;

const int MAX_LIGHTS= 5;
uniform vec3 u_light_pos[MAX_LIGHTS];
uniform vec3 u_light_color[MAX_LIGHTS];
uniform float u_max_distance[MAX_LIGHTS];

uniform int u_num_lights;

uniform vec3 u_ambient_light;


out vec4 FragColor;

void main()
{
	vec3 N= normalize(v_normal);
	vec2 uv = v_uv;
	vec4 color = u_color;
	color *= texture( u_texture, v_uv );

	if(color.a < u_alpha_cutoff)
		discard;

	vec3 light = vec3(u_ambient_light);
	for( int i = 0; i < MAX_LIGHTS; ++i )
	{
		if(i < u_num_lights)
		{
			vec3 L =  u_light_pos[i] - v_world_position;
			float light_dist= length(L);
			L/=light_dist;
			float att_factor = u_max_distance[i] - light_dist;


			
			att_factor /= u_max_distance[i];
			
			att_factor*=pow(att_factor,2.0);

			//ignore negative values
			att_factor = max( att_factor, 0.0 );


			float NdotL = max( dot(L,N), 0.0 );
			//apply to amount of light
			light += ( NdotL * u_light_color[i]) * att_factor;



		}
	}
	color.xyz *= light;
	
	
	FragColor = color;
}

\multiPass.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;
in vec4 v_color;

uniform vec4 u_color;
uniform sampler2D u_texture;
uniform float u_time;
uniform float u_alpha_cutoff;
uniform float u_light_max_distance;

uniform vec3 u_light_position;
uniform vec3 u_light_color;
uniform int  u_light_type;
uniform vec3 u_light_vector;

uniform vec3 u_ambient_light;
uniform vec3 u_target_pos;
uniform float u_spotCosineCuttof;
uniform float u_cone_exp;
uniform float u_cone_angle;


out vec4 FragColor;

void main()
{
	vec3 N= normalize(v_normal);
	vec2 uv = v_uv;
	vec4 color = u_color;
	vec3 L;
	color *= texture( u_texture, v_uv );

	if(color.a < u_alpha_cutoff)
		discard;

	vec3 light = vec3(u_ambient_light);
	if (u_light_type==1) //Directional Light
	{
	L= -normalize(u_light_vector);
	}else{
	L= (u_light_position- v_world_position);
	
	}
	float light_dist= length(L);
	L/=light_dist;
	
	float att_factor = u_light_max_distance - light_dist;
	float spotFactor=1.0;
	if (u_spotCosineCuttof>0.0){
		vec3 D= u_light_vector;
		float spotCosine= dot(D,L);
		if (spotCosine> u_spotCosineCuttof){
			spotFactor= pow(spotCosine,u_cone_exp);
		}else{
			spotFactor=0;
		}
	}
	
	att_factor /= u_light_max_distance;
	att_factor*=pow(att_factor,2.0);

	//ignore negative values
	att_factor = max( att_factor, 0.0 );
	if(u_light_type==1){
		att_factor=1;
	}

	float NdotL = max( dot(L,N), 0.0 );
	//apply to amount of light
	light += ( NdotL * u_light_color) * att_factor*spotFactor;
	color.xyz *= light;
	
	
	FragColor = color;
}

\noLights.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;
in vec4 v_color;

uniform vec4 u_color;
uniform sampler2D u_texture;
uniform float u_time;
uniform float u_alpha_cutoff;
uniform vec3 u_ambient_light;

out vec4 FragColor;


void main()
{
	vec2 uv = v_uv;
	vec4 color = u_color;
	color *= texture( u_texture, v_uv );

	if(color.a < u_alpha_cutoff)
		discard;

	color.xyz*= u_ambient_light;
	FragColor = color;
}


\texture.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;
in vec4 v_color;

uniform vec4 u_color;
uniform sampler2D u_texture;
uniform float u_time;
uniform float u_alpha_cutoff;

out vec4 FragColor;

void main()
{
	vec2 uv = v_uv;
	vec4 color = u_color;
	color *= texture( u_texture, v_uv );

	if(color.a < u_alpha_cutoff)
		discard;

	FragColor = color;
}


\multi.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;

uniform vec4 u_color;
uniform sampler2D u_texture;
uniform float u_time;
uniform float u_alpha_cutoff;

layout(location = 0) out vec4 FragColor;
layout(location = 1) out vec4 NormalColor;

void main()
{
	vec2 uv = v_uv;
	vec4 color = u_color;
	color *= texture( u_texture, uv );

	if(color.a < u_alpha_cutoff)
		discard;

	vec3 N = normalize(v_normal);

	FragColor = color;
	NormalColor = vec4(N,1.0);
}

\flat.fs

#version 330 core

out vec4 FragColor;

void main(){
FragColor=vec4(1.0,1.0,1.0,1.0);
}


\depth.fs

#version 330 core

uniform vec2 u_camera_nearfar;
uniform sampler2D u_texture; //depth map
in vec2 v_uv;
out vec4 FragColor;

void main()
{
	float n = u_camera_nearfar.x;
	float f = u_camera_nearfar.y;
	float z = texture2D(u_texture,v_uv).x;
	float color = n * (z + 1.0) / (f + n - z * (f - n));
	FragColor = vec4(color);
}


\instanced.vs

#version 330 core

in vec3 a_vertex;
in vec3 a_normal;
in vec2 a_coord;

in mat4 u_model;

uniform vec3 u_camera_pos;

uniform mat4 u_viewprojection;

//this will store the color for the pixel shader
out vec3 v_position;
out vec3 v_world_position;
out vec3 v_normal;
out vec2 v_uv;

void main()
{	
	//calcule the normal in camera space (the NormalMatrix is like ViewMatrix but without traslation)
	v_normal = (u_model * vec4( a_normal, 0.0) ).xyz;
	
	//calcule the vertex in object space
	v_position = a_vertex;
	v_world_position = (u_model * vec4( a_vertex, 1.0) ).xyz;
	
	//store the texture coordinates
	v_uv = a_coord;

	//calcule the position of the vertex using the matrices
	gl_Position = u_viewprojection * vec4( v_world_position, 1.0 );
}